worker_processes  1;

#开发环境
error_log  logs/error.log  debug;

pid     logs/nginx.pid;

events {
  worker_connections  1024;
}

http {
  default_type 'text/html';
  charset utf-8;

  # 先定义日志格式，main是日志格式的名字
  log_format main '$remote_addr - $remote_user [$time_local] $request - '
    ' $status - $body_bytes_sent [$http_referer] '
    '[$http_user_agent] [$http_x_forwarded_for]';
  # 配置日志文件、访问日志格式
  access_log logs/access_main.log main;

  lua_package_path "./?.lua;F:/github/LuaDemoProject/src/?.lua;D:/Program Files (x86)/openresty-1.21.4.2-win32/lualib/?.lua;;";

  # 初始化项目
  init_by_lua_file luaScript/initial/loading_config.lua;

  #调试模式（即关闭lua脚本缓存)
  lua_code_cache off;

  server {
    listen       80 default;
    server_name  localhost;
    default_type 'text/html';
    charset utf-8;

    location / {
      echo "默认根路径匹配: /";
    }

    #测试lua是否可以执行
    location  /lua {
      content_by_lua 'ngx.say("Hello, Lua!")';
    }

    location /test {
      default_type 'text/html';
      charset utf-8;
      content_by_lua_file luaScript/test.lua;
    }

    location /helloworld {
      default_type 'text/html';
      charset utf-8;
      content_by_lua_file luaScript/module/demo/helloworld.lua;
    }

    location /demo {
      default_type 'text/html';
      charset utf-8;
      content_by_lua_file luaScript/module/demo/runDemo.lua;
    }

    location /access_demo {
      access_by_lua '
      ngx.log(ngx.DEBUG, "remote_addr"..ngx.var.remote_addr);
      if ngx.var.remote_addr == "192.168.233.128" then
        return;
      end
      ngx.exit(ngx.HTTP_UNAUTHORIZED);
      ';
      echo "hello world";
    }

    location  /access_demo2 {
      allow "192.168.56.121";
      deny all;
      echo "hello";
    }

    location /add_params_demo {
      set_by_lua $sum '
      local args = ngx.req.get_uri_args();
      local a = args["a"];
      local b = args["b"];
      return a + b;
      ';
      echo "$arg_a + $arg_b = $sum";
    }

    location /add_params_demo_2 {
      set_by_lua $sum '
      local a = tonumber(ngx.arg[1]);
      local b = tonumber(ngx.arg[2]);
      return a + b;
      ' $arg_a $arg_b;
      echo "$arg_a + $arg_b = $sum";
    }
    #模拟上游服务
    location /header_demo {
      content_by_lua_block {
        ngx.header["header1"] = "value1";
        ngx.header.header2 = 2;
        ngx.header.set_cookie = {'Foo = bar;test = ok;path = /','age = 18;path=/'}
        ngx.say("演示程序: ngx.header的使用");
      }
    }
    #模拟反向代理外部网关
    location /header_filter_demo {
      proxy_pass http://127.0.0.1/header_demo;

      header_filter_by_lua_block {
        local cookies = ngx.header.set_cookie
        if cookies then
          if type(cookies) == "table" then
            local cookie = {}
            for k, v in pairs(cookies) do
              cookie[k]= v..";Secure;httponly"
            end
            ngx.header.set_cookie = cookie
          else
            ngx.header.set_cookie = cookies..";Secure;httponly"
          end
        end
      }
    }
    #演示通过Lua访问Nginx变量
    location /lua_var_demo {
      #set指令自定义一个Nginx变量
      set $hello world;
      content_by_lua_block {
        local basic = require("luaScript.module.common.basic");
        -- 定义一个Lua table，暂存需要输出的Nginx内置变量
        local vars = {};
        vars.remote_addr = ngx.var.remote_addr;
        vars.request_uri = ngx.var.request_uri;
        vars.query_string = ngx.var.query_string;
        vars.uri = ngx.var.uri;
        vars.nginx_version = ngx.var.nginx_version;
        vars.server_protocol = ngx.var.server_protocol;
        vars.remote_user = ngx.var.remote_user;
        vars.request_filename = ngx.var.request_filename;
        vars.request_method = ngx.var.request_method;
        vars.document_root = ngx.var.document_root;
        vars.body_bytes_sent = ngx.var.body_bytes_sent;
        vars.binary_remote_addr = ngx.var.binary_remote_addr;
        vars.args = ngx.var.args;

        -- 通过内置变量访问请求参数
        vars.foo = ngx.var.arg_foo;
        ngx.say("演示程序: 将内置变量返回给客户端<br>");
        -- 使用自定义函数，将Lua table转换成字符串，然后输出
        local str = basic.tableToStr(vars,",<br>");
        ngx.say(str);
        ngx.say("<br>演示程序: 将普通变量返回给客户端<br>");
        -- 访问自定义Nginx变量hello
        local hello= ngx.var.hello;
        ngx.say("hello="..hello);
      }
    }

    #Lua访问请求上下文变量
    location /ctx_demo {
      rewrite_by_lua_block {
        -- 在上下文设置属性var1
        ngx.ctx.var1 = 1;
      }
      access_by_lua_block {
        -- 在上下文设置属性var2
        ngx.ctx.var2 = 10;
      }
      content_by_lua_block {
        local basic = require("luaScript.module.common.basic");
        -- 在上下文设置属性var1
        ngx.ctx.var3 = 100;
        local result = ngx.ctx.var1 + ngx.ctx.var2 + ngx.ctx.var3;
        ngx.say(result);
        ngx.ctx.sum = result;
        local str = basic.tableToStr(ngx.ctx,"<br>");
        ngx.say("<br>");
        ngx.say(str);
      }
    }

    location /internal/sum {
      # internal; # 只允许内部调用
      content_by_lua_block {
        -- 通过ngx.var访问Nginx变量
        local arg_a = tonumber(ngx.var.arg_a);
        local arg_b = tonumber(ngx.var.arg_b);
        local arg_c = tonumber(ngx.var.arg_c);
        -- 3个参数值求和
        local sum = arg_a + arg_b + arg_c;
        ngx.say(arg_a , "+" ,arg_b,"+",arg_c ,"=" ,sum);
      }
    }
    location /sum {
      content_by_lua_block {
        -- local res = ngx.exec("/internal/sum", 'a = 100&b=10&c=1')；
        -- 内部重定向到 /internal/sum
        return ngx.exec("/internal/sum",{a= 100 ,b = 10 ,c =1});
      }
    }

    location /sum2 {
      content_by_lua_block {
        -- 外部重定向
        return ngx.redirect("/internal/sum?a=100&b=10&c=1");
      }
    }

    location /sum3 {
      rewrite ^/sum3 "/internal/sum?a=100&b=10&c=1" redirect;
    }

    location /sum4 {
      content_by_lua_block {
        -- 外部重定向
        return ngx.redirect("/internal/sum?a=100&b=10&c=1",ngx.HTTP_MOVED_PERMANENTLY);
      }
    }

    location /sum5 {
      rewrite ^/sum5 "/internal/sum?a=100&b=10&c=1" permanent;
    }

    #内部请求
    location ~ /internal/detail/([0-9]+) {
      internal;
      # 将捕获组 1 的值放到  $goodsId
      set $goodsId $1;
      content_by_lua_block {
        ngx.req.read_body();
        ngx.say(" <br><hr>child start： ");
        -- 访问父请求传递的参数
        local args = ngx.req.get_uri_args()
        ngx.say(", <br>foo =", args.foo);

        -- 访问父请求传递的请求体
        local data = ngx.req.get_body_data()
        ngx.say(", <br>data =", data);

        -- 访问 Nginx 定义的变量
        ngx.say(" <br> goodsId =", ngx.var.goodsId);
        -- 访问父请求传递的变量
        ngx.say(", <br>var.var1 =", ngx.var.var1);

        -- 访问父请求传递的共享上下文，并修改其属性
        ngx.say(", <br>ngx.ctx.c1 =", ngx.ctx.c1);
        ngx.say(" <br>child end <hr>");
        ngx.ctx.c1 = "changed value by child";
      }
    }

    #向外公开的请求
    location ~ /goods/detail/([0-9]+) {
      set $goodsId $1; #将location的正则捕获组1，赋值到变量 $goodsId
      set $var1 '';
      set $var2 '';
      content_by_lua_block {
        -- 解析 body 参数之前一定要先读取request body
        ngx.req.read_body();
        -- 组装 uri
        local uri = "/internal/detail/".. ngx.var.goodsId;

        local request_method = ngx.var.request_method;
        -- 获取父请求的参数
        local args = ngx.req.get_uri_args();

        local shareCtx = {c1 = "v1", other = "other value"}

        local res = ngx.location.capture(uri,{
            method = ngx.HTTP_GET,
            args = args,  --转发父请求的参数给子请求
            body = 'customed  request body',
            vars = {var1 = "value1", var2 = "value2"}, -- 传递的 Nginx 变量
            always_forward_body = true, -- 转发父请求的 request body
            ctx = shareCtx,  --共享给子请求的 上下文 table
          });
        ngx.say(" child res.status :", res.status);
        ngx.say(res.body);
        ngx.say("<br>shareCtx.c1 =", shareCtx.c1);
      }
    }

    #模拟上游接口一：输出get请求的参数
    location /print_get_param {
      internal;
      content_by_lua_block {
        ngx.say(" <br><hr>child start： ");
        local arg = ngx.req.get_uri_args()
        for k, v in pairs(arg) do
          ngx.say("<br>[GET ] key:", k, " v:", v)
        end
        ngx.say(" <br>child end <hr>");
      }
    }

    #模拟上游接口二：输出post请求的参数
    location /print_post_param {
      internal;
      content_by_lua_block {
        ngx.say(" <br><hr>child start： ");
        ngx.req.read_body() -- 解析 body 参数之前一定要先读取 body
        local arg = ngx.req.get_post_args();
        for k, v in pairs(arg) do
          ngx.say("<br>[POST] key:", k, " v:", v)
        end
        ngx.say(" <br>child end <hr>");
      }
    }

    #发起两个子请求，一个get，一个post
    location /capture_multi_demo {
      content_by_lua_block  {
      local postBody = ngx.encode_args({post_k1 = 32, post_k2 = "post_v2"});
      local reqs = {};
      table.insert(reqs, { "/print_get_param", { args = "a=3&b=4"   }});
      table.insert(reqs, { "/print_post_param",{ method = ngx.HTTP_POST, body = postBody}});
      -- 统一发请求，然后等待结果
      local resps = {ngx.location.capture_multi(reqs)};

      -- 迭代结果列表
      for i, res in ipairs(resps) do
        ngx.say(" child res.status :", res.status,"<br>");
        ngx.say(" child  res.body :", res.body,"<br><br>");
      end
      }
    }
  }
}
