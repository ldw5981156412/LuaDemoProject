worker_processes  1;

#开发环境
error_log  logs/error.log  debug;

pid     logs/nginx.pid;

events {
  worker_connections  1024;
}

http {
  default_type 'text/html';
  charset utf-8;

  # 先定义日志格式，main是日志格式的名字
  log_format main '$remote_addr - $remote_user [$time_local] $request - '
    ' $status - $body_bytes_sent [$http_referer] '
    '[$http_user_agent] [$http_x_forwarded_for]';
  # 配置日志文件、访问日志格式
  access_log logs/access_main.log main;

  lua_package_path "./?.lua;G:/github/LuaDemoProject/src/?.lua;D:/Program Files (x86)/openresty-1.21.4.2-win32/lualib/?.lua;;";

  # 初始化项目
  init_by_lua_file luaScript/initial/loading_config.lua;

  #调试模式（即关闭lua脚本缓存)
  lua_code_cache off;

  server {
    listen       80 default;
    server_name  localhost;
    default_type 'text/html';
    charset utf-8;

    location / {
      echo "默认根路径匹配: /";
    }

    location /redis_demo {
      content_by_lua_file luaScript/redis/RedisDemo.lua;
    }

    #点击次数统计的演示
    location /visitCount {
      set $count 0;
      access_by_lua_file luaScript/redis/RedisVisitCount.lua;
      echo "10s内总的访问次数为: " $count;
    }
    
    #首先从缓存查询商品，未命中再回源到Java后台
    location /good/detail {
      content_by_lua_block {
        local goodId = ngx.var.arg_goodid;
        if not goodId then
          ngx.say("请输入goodId");
          return;
        end
        local RedisCacheDemo = require "luaScript.redis.RedisCacheDemo";
        local redisCacheDemo = RedisCacheDemo:new();
        local json = redisCacheDemo:getCache(goodId);
        -- 判断缓存是否被命中
        if not json then
          ngx.say("缓存是否被命中，回源到上游接口<br>");
          json = redisCacheDemo.goUpstream();
        else
          ngx.say("缓存已经被命中<br>");
        end
        ngx.say("商品信息：" , json);
      }
    }

    location /java/good/detail {
      # 指定规则为internal内部规则，防止外部请求命中此规则
      internal;
      content_by_lua_block {
        local RedisCacheDemo = require "luaScript.redis.RedisCacheDemo";

        -- Java后台将从数据库查找商品, 这里简化...
        local json='{goodId:商品id,goodName:商品名称}';
        -- 将商品缓存到Redis
        local redisCacheDemo = RedisCacheDemo:new();
        redisCacheDemo:setCache(ngx.var.arg_goodid, json);
        -- 返回商品到下游网关
        ngx.say(json);
      }
    }
  }
}